# VPC Demo for 2 tier app in private subnet

https://youtu.be/FZPTL_kNvXc
# Lesson 7: VPC with Servers in Private Subnets and NAT

## What You Will Learn
- Design a secure, highly available VPC architecture for production workloads.
- Deploy application servers in private subnets across multiple Availability Zones.
- Enable controlled internet access using NAT gateways and private AWS service access via VPC endpoints.
- Apply core DevOps principles: **infrastructure as code**, **resilience**, **automation**, and **least-privilege networking**â€”all key domains of the **AWS Certified DevOps Engineer â€“ Professional** exam.

---

## Why This Architecture Matters for DevOps
In AWS DevOps environments, infrastructure must be **secure by default**, **self-healing**, and **automatable**. Placing application servers in **private subnets** removes direct public exposure, reducing attack surface. Using **Auto Scaling groups** and **Application Load Balancers** ensures the system can recover from failures and scale with demandâ€”critical for CI/CD pipelines and production services. This pattern is a foundational requirement for **Domain 1: SDLC Automation** and **Domain 2: Configuration Management** of the DevOps Pro exam.

---

## Architecture Overview
This example creates a VPC with:
- **Public and private subnets** in **two Availability Zones (AZs)** for high availability.
- **Application servers** running in **private subnets**, launched and managed by an **Auto Scaling group**.
- An **Application Load Balancer (ALB)** in public subnets to distribute traffic to healthy instances.
- **One NAT gateway per AZ** so servers can securely access the internet (e.g., for package updates).
- A **gateway VPC endpoint for Amazon S3**, enabling private, low-latency access to S3 without internet egress.

> âœ… This design supports **immutable infrastructure**, **automated recovery**, and **secure service-to-service communication**â€”all DevOps best practices.

![VPC Architecture](https://docs.aws.amazon.com/images/vpc/latest/userguide/images/vpc-example-private-subnets.png)

---

## Routing

### Public Subnet Route Table
| Destination               | Target        |
|---------------------------|---------------|
| `10.0.0.0/16`             | local         |
| `2001:db8:1234:1a00::/56`| local         |
| `0.0.0.0/0`               | `igw-id`      |
| `::/0`                    | `igw-id`      |

> Handles inbound traffic from the internet to the load balancer.

### Private Subnet Route Table
| Destination               | Target            |
|---------------------------|-------------------|
| `10.0.0.0/16`             | local             |
| `2001:db8:1234:1a00::/56`| local             |
| `0.0.0.0/0`               | `nat-gateway-id`  |
| `::/0`                    | `eigw-id`         |
| `s3-prefix-list-id`       | `s3-gateway-id`   |

> Enables outbound internet access (via NAT) and private S3 accessâ€”**no public IPs required**.

---

## Security

Security groups for servers must allow only essential traffic:

| Source                                | Protocol            | Port Range         | Purpose                                  |
|---------------------------------------|---------------------|--------------------|------------------------------------------|
| Load balancer security group ID       | Listener protocol   | Listener port      | Accept traffic from ALB                  |
| Load balancer security group ID       | Health check protocol | Health check port | Allow ALB health checks                  |

> ðŸ”’ **No inbound rules from 0.0.0.0/0** â€” servers are **not publicly reachable**, aligning with **least privilege** and **defense-in-depth**.

---

## DevOps Implementation Steps

### 1. Create the VPC (Automatable via IaC)
- Use **VPC Console â†’ "VPC and more"** or define in **CloudFormation/Terraform**.
- Configure:
  - **2 AZs**
  - **2 public + 2 private subnets**
  - **1 NAT gateway per AZ** (for resilience)
  - **S3 Gateway VPC endpoint** (free, private S3 access)
  - **Disable DNS hostnames** unless required

> ðŸ’¡ For DevOps: **Always codify this** using AWS CloudFormation or Terraform to ensure repeatability across environments (dev/staging/prod).

### 2. Deploy Application with Automation
- Create a **launch template** (defines AMI, IAM role, user data, etc.)
- Create an **Auto Scaling group** across private subnets
- Create an **Application Load Balancer** in public subnets
- Attach ALB to Auto Scaling group

> ðŸ”„ This enables **self-healing**: failed instances are automatically replaced.

### 3. Test & Monitor
- Validate application via ALB DNS
- Confirm servers can reach S3 and internet (e.g., `curl https://s3.amazonaws.com`)
- Use **Reachability Analyzer** to debug connectivity (exam-relevant troubleshooting tool)

### 4. Clean Up (Critical in Dev/Test)
- Delete Auto Scaling group
- Delete Load Balancer
- Delete NAT gateways
- Delete VPC

> ðŸ§ª In CI/CD pipelines, **automated teardown** prevents cost leakageâ€”key for DevOps cost optimization.

---

## AWS DevOps Engineer â€“ Professional Exam Relevance
- **Domain 1.1**: Implement highly available, scalable, and self-healing architectures â†’ Auto Scaling + multi-AZ VPC
- **Domain 2.2**: Manage infrastructure as code â†’ VPC, subnets, NAT, endpoints via CloudFormation/Terraform
- **Domain 3.1**: Apply security best practices â†’ private subnets, security groups, VPC endpoints
- **Domain 4.3**: Troubleshoot distributed systems â†’ use Reachability Analyzer, VPC Flow Logs

> âœ… Mastering this pattern is essential for the exam and real-world AWS DevOps roles.